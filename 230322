CREATE TABLE dept_TEMP
   AS ( SELECT * FROM dept );
  
-- COMMIT; -- to confirm IF ANY CHANGEs ON DB IS VALID

/*
 * CREATE ... AS (SELECT ... FROM ...) 구문
 */
SELECT *
FROM DEPT_TEMP dt
;
/*
 * INSERT 데이터를 입력하는 방식
 * 
 * -- 기본 구문
 * INSERT INTO 테이블명(컬럼명1, 컬럼명2, ...)
 * VALUES (데이터1, 데이터2, ...)
 * 
 * -- 단순한 형태
 */
INSERT INTO dept_dept (deptno, dname, loc)
VALUES (50, 'DATABASE', 'SEOUL')
;

INSERT INTO dept_temp (deptno, dname, loc)
VALUES(50, 'WEB', NULL)
;

INSERT INTO dept_temp (deptno, dname, loc)
VALUES (80, 'MOBILE', '')
;

INSERT INTO dept_temp (deptno, dname, loc)
VALUES (90, 'INCHEON')
;

COMMIT;

CREATE TABLE emp_temp AS
   SELECT * FROM EMP 
        WHERE 1 <> 1
;

COMMIT;

SELECT * FROM emp_temp;

INSERT INTO emp_temp (empno, ename, job, mgr, hiredate, sal, comm, deptno)
VALUES (9999, '홍길동', 'PRESIDENT', NULL, '2001/01/01', 6000, 500, 10)
;

-- commit;
SELECT *
FROM EMP_TEMP 
;

/*
 * UPDATE 문 : 필터된 데이터에 대해서 레코드 값을 수정
 */
CREATE TABLE dept_temp2
   AS (SELECT * FROM dept)
;

SELECT *
FROM dept_temp2 -- 테스트 개발을 위한 임시 테이블 확인
;

/* 
 * UPDATE ...
 * SET ...
 */

UPDATE DEPT_TEMP2 
SET

SELECT *
FROM EMP 
WHERE rownum < 3 ;

UPDATE DEPT_TEMP2 
SET (DNAME, LOC) = (SELECT dname, loc
                    FROM dpet
                    WHERE deptno = 40
                    )
WHERE deptno = 40
;

SELECT *
FROM emp_temp2
;

CREATE TABLE emp_temp2
       AS (SELECT * FROM emp)
       ;

COMMIT;

DELETE FROM emp_temp2
WHERE job - 'MANAGER'
;

SELECT e.empno
FROM emp_temp2 e, salgrade s
WHERE e.sal BETWEEN s.losal AND s.HISAL 
AND s.grade = 3
AND deptno = 30
;

/*
 * CREATE 문을 정의 : 기존에 없는 테이블 구조를 생성
 * 
 * 데이터는 없고, 테이블의 컬럼과 데이터타입, 제약 조건 등의 구조를 생성
 */
CREATE TABLE Emp_New
(
  empno     number(4)
  , ename   varchar(10)
  , job     varchar(9)
  , mgr     number(4)
  , hiredate DATE
  , SALGRADE number(7,2)
  , comm    number(7,2)
  , deptno  number(2)
)
;

SELECT *
FROM EMP 
WHERE rownum <= 5
;

SELECT *
FROM EMP_NEW 
;

ALTER TABLE EMP_NEW 
ADD hp varchar(20)
;

ALTER TABLE EMP_NEW 
RENAME COLUMN hp TO TEL_NO 
;

ALTER TABLE emp_new -- 새로 인수한 회사 직원 ㅗ간리 테이블
MODIFY empno number(5)
;

ALTER TABLE EMP_NEW 
DROP COLUMN tel_no
;

/*
 * SEQUENCE 일련번호를 생성하여 테이블 관리를 편리하게 하고자 함
 */
CREATE SEQUENCE seq_deptno
   INCREMENT BY 1
   START WITH 1
   MAXVALUE 999
   MINVALUE 1
   nocycle nocache
   ;

SELECT *
FROM DEPT_TEMP2 ;

/*
 * SEQUENCE 입력 예시 - DEPT_TEMP2 테이블
 */

INSERT INTO dept_temp2 (deptno, dname, loc)
VALUES (seq_deptno.nextval, 'DATABASE', 'SEOUL')
;

INSERT INTO dept_temp2 (deptno, dname, loc)
VALUES (seq_deptno.nextval, 'WEB', 'BUSAN')
;

INSERT INTO dept_temp2 (deptno, dname, loc)
VALUES (seq_deptno.nextval, 'MOBILE', 'SEOUNGSU')
;

/*
 * 제약 조건(CONSTRAINT) 지정
 * 
 * 테이블을 생성할 떄, 테이블 컬럼별 제약 조건을 설정
 * 
 * 자주 사용되는 중요한 제약조건 유형
 * Not Null
 * Unique
 * PK
 * FK
 */
CREATE TABLE LOGIN
(
log_id VARCHAR2(20)       NOT NULL
, log_pwd varchar2(20)    NOT NULL
, tel     varchar2(20)
);

INSERT INTO login (log_id, log_pwd, tel)
VALUES ('test01', '1234', '010-1234-2343')
;

SELECT *
FROM LOGIN 
;

/*
 * TEL 컬럼의 중요성을 나중에 인지하고, Not Null 제약조건을 설정
 */
ALTER TABLE login
MODIFY tel NOT NULL
;

/*
 * TEL 없는 고객이 발견되어, 수소문 끝에 어렵게 전화번호를 구함
 */
UPDATE login
SET tel = '010-1234-5678'
WHERE log_id = 'test01'
;

/*
 * 오라클 DBMS가 사용자를 위해 만들어 놓은 제약조건 설정값 테이블
 */
SELECT owner,
     , CONSTRAINT_NAME
     , CONSTRAINT_TYPE 
     , table_name
FROM USER_CONSTRAINTS
WHERE table_name = 'LOGIN'
;

ALTER TABLE login 
MODIFY (tel CONSTRAINT tel_nn NOT null)
;

ALTER TABLE login
DROP CONSTRAINT SYS_C007040 -- 제약조건 이름이 없어 주어진 이름 사용
;

/*
 * UNIQUE 키워드 사용
 */
CREATE TABLE log_unique
(
    log_id     varchar2(20) UNIQUE
   ,log_pwd    varchar2(20) NOT NULL
   ,tel        varchar2(20)
    );

ALTER TABLE log_unique
MODIFY (tel unique)
;

CREATE TABLE log_pk
(
log_id         varchar2(20) PRIMARY KEY
, log_pwd      varchar2(20) NOT NULL
, tel          varchar2(20)
);

INSERT INTO log_pk (log_id, log_pwd, tel)
VALUES ('pk01', 'pwd01', '012-3456-8970');

-- 기존 고객의 ID와 동일한 ID 입력하는 경우
-- log_id (PK 제약조건 위반)
INSERT INTO log_pk (log_id, log_pwd, tel)
VALUES ('pk01', 'pwd02', '011-3456-8979');

INSERT INTO log_pk (log_id, log_pwd, tel)
VALUES (NULL, 'pwd02', '011-3456-8979');

SELECT *
FROM EMP_TEMP 

/*
 * INDEX 빠른 검색을 위한 색인
 * 
 * 장점: 순식간에 원하는 값을 찾아 준다
 * 단점: 입력과 출력이 잦은 경우, 인덱스가 설정된 테이블의 속도가 저하된다
 */

-- 특정 직군에 해당하는 직원을 빠르게 찾기 위한 색인 지정
SELECT *
FROM USER_INDEXES WHERE table_name IN ('emp','dept');

SELECT *
FROM USER_INDEXES
WHERE TABLE_NAME IN('EMP','DEPT');

/* 
 * VIEW : 테이블을 편리하게 사용하기 위한 목적으로 생성하는 가상 테이블
 */
CREATE VIEW vw_emp
AS ( SELECT empno, ename, job, deptno
      FROM EMP 
      WHERE deptno = 10)
;

SELECT *
FROM vw_emp
;

SELECT *
FROM USER_VIEWS WHERE VIEW_NAME = 'VW_EMP' -- 테이블명은 대문자로 표기

/*
 * ROWNUM 사용 : 상위 N개를 출력하기 위해 사용하며
 * 컬럼에 ROWNUM 순번을 입력하여 사용할 수 있음
 */
SELECT rownum,
       E.*
FROM emp E
ORDER BY sal DESC 
;

SELECT rownum
, A.*
FROM (SELECT *
      FROM EMP 
      ORDER BY sal DESC) A
WHERE rownum <= 5
;

/* 
 * 오라클 DBMS에서 관리하는 관리 테이블 리스트 출력
 */
SELECT *
FROM DICT WHERE table_name like 'USER_CON%' -- % 와일드 카드
;

SELECT *
FROM DBA_TABLES
WHERE table_name LIKE 'EMP%'
;
